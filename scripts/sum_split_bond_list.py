import re, sys, os

def read_bond_list_piece(max_step_num, fp):
    xss = []
    regexp_float = r'[+-]?(\d+\.)?\d+([deE][+-]?\d+)?'
    step_num = -1
    for line in fp:
        m = re.match(r'## step_count =\s+(\d+)', line)
        if m:
            step_num += 1
            if step_num >= max_step_num:
                break
            xss.append([])
        else:
            m = re.search(r'(?P<a2>\d+)\s+(?P<o1>\d+)\s+(?P<a1>\d+)\s+(?P<icohp>%s)' % regexp_float, line)
            if m:
                atom2 = int(m.group('a2')) - 1  # 1-origin to 0-origin.
                orbital1 = int(m.group('o1')) - 1
                atom1 = int(m.group('a1')) - 1
                icohp = float(m.group('icohp'))
                xss[step_num].append((atom2, orbital1, atom1, icohp))
    return xss

def mmwrite_symmetric(mtx, m, n, filename, comment):
    with open(filename, 'w') as fp:
        fp.write('%%MatrixMarket matrix coordinate real symmetric\n')
        fp.write('%%%s\n' % comment)
        num_nonzeros = 0
        for i, j in mtx.keys():
            num_nonzeros += 1
        fp.write('%7d %7d %12d\n' % (m, n, num_nonzeros))
        for (i, j), x in mtx.items():
            fp.write('%7d %7d % .16e\n' % (i + 1, j + 1, x))  # The space between % and . is intended.

if __name__ == '__main__':
    num_atoms = int(sys.argv[1])
    molecule_size = int(sys.argv[2])
    max_step_num = int(sys.argv[3])
    assert(num_atoms % molecule_size == 0)
    num_molecules = num_atoms / molecule_size
    Xs = []
    for i in range(max_step_num):
        Xs.append({})

    if len(sys.argv) >= 6:
        max_num_files = int(sys.argv[5])
    else:
        max_num_files = None

    dirname = sys.argv[4]
    assert(os.path.isdir(dirname))
    split_bond_list_filenames = filter(lambda s: s.find('output_bond_list') >= 0, os.listdir(dirname))
    file_num = 0
    for f in split_bond_list_filenames:
        file_num += 1
        if max_num_files is not None and file_num > max_num_files:
            break
        print 'start reading %d / %d: %s' % (file_num, len(split_bond_list_filenames), f)
        with open(os.path.join(dirname, f)) as fp:
            xss = read_bond_list_piece(max_step_num, fp)
            for step_num in range(len(xss)):
                for (atom2, orbital1, atom1, icohp) in xss[step_num]:
                    key = (atom1 / molecule_size, atom2 / molecule_size)
                    key_transpose = (key[1], key[0])  # Symmetrize here.
                    if not key in Xs[step_num]:
                        Xs[step_num][key] = 0.0
                    if not key_transpose in Xs[step_num]:
                        Xs[step_num][key_transpose] = 0.0                        
                    Xs[step_num][key] += icohp / 2.0
                    Xs[step_num][key_transpose] += icohp / 2.0

    step_num = 0
    for X in Xs:
        mmwrite_symmetric(X, num_molecules, num_molecules,
                          'bond_list_molecule_symmetrized_%06d.mtx' % step_num,
                          'generated by sum_split_bond_list.py. command: ' + ' '.join(sys.argv))
        step_num += 1
